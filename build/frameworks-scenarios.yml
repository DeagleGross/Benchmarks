# Frameworks trend scenarios

parameters:
- name: arguments
  type: string
  default: ''
- name: connection
  type: string
  default: ''
- name: condition
  type: string
  default: 'true'
- name: config
  type: string
  default: --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/te.benchmarks.yml

# Scenarios
- name: scenarios 
  type: object
  default: 

# List of scenarios

  # NodeJS (JavaScript)
  # Scenarios are in frameworks-database-scenarios.yml since they require the db server

  # Express (JavaScript)

  - displayName: Express Plaintext
    arguments: --scenario plaintext_express --load.variables.connections 1024 --property scenario=PlaintextExpress --property protocol=http
  - displayName: Express Json
    arguments: --scenario json_express --load.variables.connections 512 --property scenario=JsonExpress --property protocol=http

  # Gin (Go)
  # Scenarios are in frameworks-database-scenarios.yml since they require the db server

#  Ntex (Rust)

  - displayName: Ntex Plaintext
    arguments: --scenario plaintext_ntex --load.variables.connections 1,024 --property scenario=PlaintextNtex --property protocol=http
  - displayName: Ntex Json
    arguments: --scenario json_ntex --load.variables.connections 512 --property scenario=JsonNtex --property protocol=http

  # FastHttp (Go)

  - displayName: Go Plaintext
    arguments: --scenario plaintext_fasthttp --load.variables.connections 512 --property scenario=PlaintextFastHttp --property protocol=http
  - displayName: Go Json
    arguments: --scenario json_fasthttp --load.variables.connections 512 --property scenario=JsonFastHttp --property protocol=http

  # Netty

  - displayName: Netty Plaintext
    arguments: --scenario plaintext_netty --load.variables.connections 1024 --property scenario=PlaintextNetty --property protocol=http
  - displayName: Netty Json
    arguments: --scenario json_netty --load.variables.connections 512 --property scenario=JsonNetty --property protocol=http

steps:
- ${{ each s in parameters.scenarios }}:
  - task: PublishToAzureServiceBus@1
    condition: succeededOrFailed()
    displayName: ${{ s.displayName }}
    timeoutInMinutes: 10
    inputs:
      connectedServiceName: ${{ parameters.connection }}
      waitForCompletion: true
      useDataContractSerializer: "false"
      messageBody: |
        {
          "name": "crank",
          "condition": "(${{ parameters.condition }})",
          "retries": 1,
          "args": [ "${{ s.arguments }} ${{ parameters.arguments }} ${{ parameters.config }} --application.noClean true --no-metadata --no-measurements --load.options.reuseBuild true --session $(session) --description \"${{ s.displayName }} $(System.JobDisplayName)\" --property buildId=\"$(buildId)\" --property buildNumber=\"$(buildNumber)\" --command-line-property --table TrendBenchmarks --sql SQL_CONNECTION_STRING --cert-tenant-id SQL_SERVER_TENANTID --cert-client-id SQL_SERVER_CLIENTID --cert-path SQL_SERVER_CERT_PATH --cert-sni --chart" ] 
        }
