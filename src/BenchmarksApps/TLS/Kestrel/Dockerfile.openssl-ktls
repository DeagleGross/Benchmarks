# Base image with OpenSSL built from source
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS base
USER root
WORKDIR /app

# Install dependencies for building OpenSSL
RUN apk add --no-cache \
    build-base \
    perl \
    perl-utils \
    wget \
    linux-headers

# Set OpenSSL version
ENV OPENSSL_VERSION=3.3.3
ENV OPENSSL_PREFIX=/opt/openssl

# Download, build, and install OpenSSL with kTLS
RUN wget https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz && \
    tar xzf openssl-$OPENSSL_VERSION.tar.gz && \
    cd openssl-$OPENSSL_VERSION && \
    ./config --prefix=$OPENSSL_PREFIX --openssldir=$OPENSSL_PREFIX no-shared enable-ktls && \
    make -j$(nproc) && make install && \
    cd .. && rm -rf openssl-$OPENSSL_VERSION*

# Update paths for OpenSSL
ENV PATH="$OPENSSL_PREFIX/bin:$PATH"
ENV LD_LIBRARY_PATH="$OPENSSL_PREFIX/lib:$LD_LIBRARY_PATH"
ENV PKG_CONFIG_PATH="$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"

EXPOSE 8080
EXPOSE 8081

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["Kestrel.csproj", "."]
RUN dotnet restore "./Kestrel.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "./Kestrel.csproj" -c $BUILD_CONFIGURATION -o /app/build

# Publish stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Kestrel.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# Final stage with custom OpenSSL
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

ENTRYPOINT ["dotnet", "Kestrel.dll"]